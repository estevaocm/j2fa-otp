package j2fa.otp;
/**
 Copyright (c) 2011 IETF Trust and the persons identified as
 authors of the code. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, is permitted pursuant to, and subject to the license
 terms contained in, the Simplified BSD License set forth in Section
 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents
 (http://trustee.ietf.org/license-info).
 */

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.TimeZone;


/**
 * This is an example implementation of the OATH TOTP algorithm.
 * Visit www.openauthentication.org for more information.
 *
 * @author Johan Rydell, PortWise, Inc.
 */

public final class TimebasedOneTimePasswordTest {
	
	private TimebasedOneTimePasswordTest() {}

	private static long interval(long start) {
		return (System.nanoTime() -start)/(long)Math.pow(10, 3);//microseconds
	}
	
	public static void main(String[] args) {
		long unixTime = System.currentTimeMillis()/1000L;
		System.out.println(unixTime);
		
	    System.out.println(Arrays.toString(CryptoUtils.randomSeed(20)));
	    System.out.println(Arrays.toString(CryptoUtils.randomSeed(20)));
	    //bytes = random.generateSeed(20);
	    //System.out.println(Arrays.toString(bytes));
	    //System.out.println(random.getAlgorithm());//NativePRNG
	    
		
		// Seed for HMAC-SHA1 - 20 bytes
		String seed = "3132333435363738393031323334353637383930";//hex 40
		// Seed for HMAC-SHA256 - 32 bytes
		String seed32 = seed + "313233343536373839303132";//hex 64
		// Seed for HMAC-SHA512 - 64 bytes
		String seed64 = seed32 + "3334353637383930313233343536373839303132333435363738393031323334";//hex 128
		long T0 = 0;
		long X = 30;
		long testTime[] = {59L, 1111111109L, 1111111111L, 1234567890L, 2000000000L, 20000000000L};

		String steps = "0";
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		df.setTimeZone(TimeZone.getTimeZone("UTC"));
		String border = "+---------------+-----------------------+------------------+--------+--------+--------------+";
		try {
			System.out.println(border);
			System.out.println(
					"|  Time(sec)    |   Time (UTC format)   | Value of T(Hex)  |  TOTP  | Mode   | Microseconds |");
			System.out.println(border);

			for (int i=0; i<testTime.length; i++) {
				long T = (testTime[i] - T0)/X;
				steps = "0000000000000000" + Long.toHexString(T).toUpperCase();
				steps = steps.substring(steps.length() -16);
				String fmtTime = String.format("%1$-11s", testTime[i]);
				String utcTime = df.format(new Date(testTime[i]*1000));
				System.out.print("|  " + fmtTime + "  |  " + utcTime + "  | " + steps + " |");
				long t = System.nanoTime();
				String totp = TimebasedOneTimePassword.generate(seed, steps, "8");
				t = interval(t);
				System.out.println(totp + "| SHA1   | " + t);
				System.out.print("|  " + fmtTime + "  |  " + utcTime + "  | " + steps + " |");
				t = System.nanoTime();
				totp = TimebasedOneTimePassword.generate256(seed32, steps, "8");
				t = interval(t);
				System.out.println(totp + "| SHA256 | " + t);
				System.out.print("|  " + fmtTime + "  |  " + utcTime + "  | " + steps + " |");
				t = System.nanoTime();
				totp = TimebasedOneTimePassword.generate512(seed64, steps, "8");
				t = interval(t);
				System.out.println(totp + "| SHA512 | " + t);

				System.out.println(border);
			}
		}catch (Exception e){
			e.printStackTrace();
		}
	}
}
